<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Tags Manager</title>
    <style>
	.all-tags-container {
    background-color: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin: 20px 0;
    display: none;
}
.tag-count {
    color: #666;
    font-size: 0.9em;
    margin-left: 5px;
}
        /* Previous styles remain the same */
        .tag-input {
            min-height: 100px;
            resize: vertical;
            width: 200px;
        }
		.filtered-names {
    background-color: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin: 20px 0;
    font-family: monospace;
    white-space: pre-wrap;
    word-break: break-word;
}
.filtered-names-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}
.copy-button {
    background-color: #2196F3;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
}
.copy-button:hover {
    background-color: #1976D2;
}
        textarea {
            font-family: Arial, sans-serif;
            padding: 8px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .input-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .input-group {
            margin-bottom: 15px;
            display: flex;
            gap: 10px;
            align-items: flex-start;
        }
        input, button {
            padding: 8px;
            margin-right: 10px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .filter-container {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .stocks-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .stock-card {
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }
        .stock-name {
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .button-group {
            display: flex;
            gap: 5px;
        }
        .tag {
            display: inline-block;
            background-color: #e0e0e0;
            padding: 4px 8px;
            border-radius: 4px;
            margin: 2px;
            position: relative;
        }
        .tag .remove-tag {
            display: none;
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #ff4444;
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            line-height: 16px;
            text-align: center;
            font-size: 12px;
            cursor: pointer;
        }
        .editing .tag:hover .remove-tag {
            display: block;
        }
        .delete-btn {
            background-color: #ff4444;
        }
        .delete-btn:hover {
            background-color: #cc0000;
        }
        .edit-btn {
            background-color: #2196F3;
        }
        .edit-btn:hover {
            background-color: #1976D2;
        }
        .save-btn {
            background-color: #4CAF50;
        }
        .cancel-btn {
            background-color: #808080;
        }
        .pagination {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        .stats {
            background-color: white;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .edit-form {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #eee;
        }
        .edit-form input, .edit-form textarea {
            width: calc(100% - 20px);
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="input-container">
        <div class="input-group">
            <input type="text" id="stockInput" placeholder="Enter stock name">
            <textarea id="tagInput" class="tag-input" placeholder="Enter tags (one per line)"></textarea>
            <button onclick="addStock()">Add Stock</button>
        </div>
    </div>

    <div class="stats" id="statsContainer">
        Total Stocks: 0 | Storage Used: 0 KB
    </div>

    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search by stock name">
        <button onclick="searchStocks()">Search</button>
		<button onclick="showAllTags()">Show All Tags</button> 
    </div>
	<div class="all-tags-container" id="allTagsContainer">
    <div class="filtered-names-header">
        <span>All Available Tags:</span>
        <button class="copy-button" onclick="copyAllTags()">Copy to Clipboard</button>
    </div>
    <div id="allTagsList"></div>
</div>

    <div class="filter-container">
        <input type="text" id="filterInput" placeholder="Filter by tag">
        <button onclick="filterStocks()">Filter</button>
        <button onclick="clearFilters()">Clear All Filters</button>
    </div>
	<div id="filteredNamesContainer" style="display: none;" class="filtered-names">
    <div class="filtered-names-header">
        <span>Filtered Stock Names:</span>
        <button class="copy-button" onclick="copyFilteredNames()">Copy to Clipboard</button>
    </div>
    <div id="filteredNamesList"></div>
</div>

    <div id="stocksContainer" class="stocks-container">
    </div>

    <div class="pagination" id="pagination"></div>

    <script>
        const ITEMS_PER_PAGE = 20;
        let currentPage = 1;
        let stocks = JSON.parse(localStorage.getItem('stocks')) || [];
        let filteredStocks = [...stocks];
        let editingIndex = -1;

        // Convert newlines to array of tags
        function parseTags(tagsText) {
            return tagsText
                .split('\n')
                .map(tag => tag.trim())
                .filter(tag => tag.length > 0);
        }
		function copyFilteredNames() {
    const namesArray = filteredStocks.map(stock => stock.name);
    const namesString = JSON.stringify(namesArray);
    navigator.clipboard.writeText(namesString).then(() => {
        alert('Copied to clipboard!');
    }).catch(err => {
        console.error('Failed to copy: ', err);
    });
}

function updateFilteredNamesList() {
  const namesList = document.getElementById('filteredNamesList');
  
  if (filteredStocks.length === stocks.length) {
    namesList.textContent = '';
    document.getElementById('filteredNamesContainer').style.display = 'none';
    return;
  }

  const namesArray = filteredStocks.map(stock => {
    const normalizedName = stock.name.replace(/-([A-Qa-q])$/, '').trim(); // Remove suffixes
    return normalizedName;
  });

  namesList.textContent = `[\n  "${namesArray.join('",\n  "')}"\n]`; // Display in array format
  document.getElementById('filteredNamesContainer').style.display = 'block';
}
        // Convert array of tags back to newlines for editing
        function formatTags(tags) {
            return tags.join('\n');
        }

        function updateStats() {
            const statsContainer = document.getElementById('statsContainer');
            const storageSize = new Blob([JSON.stringify(stocks)]).size;
            statsContainer.innerHTML = `Total Stocks: ${stocks.length} | Storage Used: ${(storageSize / 1024).toFixed(2)} KB`;
        }
		function showAllTags() {
    const container = document.getElementById('allTagsContainer');
    const tagsList = document.getElementById('allTagsList');
    
    // Get all unique tags and their counts
    const tagCounts = {};
    stocks.forEach(stock => {
        stock.tags.forEach(tag => {
            tagCounts[tag] = (tagCounts[tag] || 0) + 1;
        });
    });

    // Sort tags by count (descending) and then alphabetically
    const sortedTags = Object.entries(tagCounts)
        .sort(([tagA, countA], [tagB, countB]) => {
            if (countB !== countA) {
                return countB - countA;
            }
            return tagA.localeCompare(tagB);
        });

    // Create tag elements
    tagsList.innerHTML = sortedTags
        .map(([tag, count]) => `
            <span class="tag">
                ${tag}
                <span class="tag-count">(${count})</span>
            </span>
        `)
        .join(' ');

    // Toggle visibility
    container.style.display = container.style.display === 'none' ? 'block' : 'none';
}

function copyAllTags() {
    const tags = [...new Set(stocks.flatMap(stock => stock.tags))];
    navigator.clipboard.writeText(JSON.stringify(tags, null, 2))
        .then(() => alert('Tags copied to clipboard!'))
        .catch(err => console.error('Failed to copy tags:', err));
}

        function addStock() {
            const stockName = document.getElementById('stockInput').value.trim();
            const tagInput = document.getElementById('tagInput').value.trim();
            
            if (!stockName || !tagInput) {
                alert('Please enter both stock name and tags');
                return;
            }

            if (stocks.some(stock => stock.name.toLowerCase() === stockName.toLowerCase())) {
                alert('Stock already exists!');
                return;
            }

            const tags = parseTags(tagInput);
            
            if (tags.length === 0) {
                alert('Please enter at least one tag');
                return;
            }

            const newStock = { name: stockName, tags: tags };
            const newSize = new Blob([JSON.stringify([...stocks, newStock])]).size;
            
            if (newSize > 4.5 * 1024 * 1024) {
                alert('Storage limit reached! Please delete some stocks first.');
                return;
            }

            stocks.push(newStock);
            localStorage.setItem('stocks', JSON.stringify(stocks));
            
            document.getElementById('stockInput').value = '';
            document.getElementById('tagInput').value = '';
            
            filteredStocks = [...stocks];
            currentPage = Math.ceil(stocks.length / ITEMS_PER_PAGE);
            updateStats();
            displayStocks();
        }

        function startEditing(index) {
            const realIndex = (currentPage - 1) * ITEMS_PER_PAGE + index;
            editingIndex = realIndex;
            displayStocks();
        }

        function cancelEditing() {
            editingIndex = -1;
            displayStocks();
        }

        function saveEdits(index) {
            const realIndex = (currentPage - 1) * ITEMS_PER_PAGE + index;
            const stockCard = document.querySelector(`[data-index="${index}"]`);
            const newName = stockCard.querySelector('.edit-stock-name').value.trim();
            const newTagsInput = stockCard.querySelector('.edit-tags').value.trim();

            if (!newName || !newTagsInput) {
                alert('Both stock name and tags are required');
                return;
            }

            const nameExists = stocks.some((stock, idx) => 
                idx !== realIndex && stock.name.toLowerCase() === newName.toLowerCase()
            );
            if (nameExists) {
                alert('Stock name already exists!');
                return;
            }

            const newTags = parseTags(newTagsInput);
            
            if (newTags.length === 0) {
                alert('Please enter at least one tag');
                return;
            }

            stocks[realIndex] = {
                name: newName,
                tags: newTags
            };

            localStorage.setItem('stocks', JSON.stringify(stocks));
            filteredStocks = [...stocks];
            editingIndex = -1;
            displayStocks();
        }

        function removeTag(stockIndex, tagIndex) {
            const realIndex = (currentPage - 1) * ITEMS_PER_PAGE + stockIndex;
            stocks[realIndex].tags.splice(tagIndex, 1);
            localStorage.setItem('stocks', JSON.stringify(stocks));
            filteredStocks = [...stocks];
            displayStocks();
        }

        function deleteStock(index) {
            const realIndex = (currentPage - 1) * ITEMS_PER_PAGE + index;
            stocks.splice(realIndex, 1);
            localStorage.setItem('stocks', JSON.stringify(stocks));
            filteredStocks = [...stocks];
            updateStats();
            displayStocks();
        }

    function searchStocks() {
    const searchTerm = document.getElementById('searchInput').value.trim().toLowerCase();
    if (!searchTerm) {
        filteredStocks = [...stocks];
    } else {
        filteredStocks = stocks.filter(stock => 
            stock.name.toLowerCase().includes(searchTerm)
        );
    }
    currentPage = 1;
    displayStocks();
    updateFilteredNamesList();  // Add this line
}

     function filterStocks() {
  const filterTag = document.getElementById('filterInput').value.trim().toLowerCase();
  if (!filterTag) {
    filteredStocks = [...stocks];
  } else {
    const normalizedStocks = stocks.map(stock => ({
     ...stock,
      normalizedName: stock.name.replace(/-([A-Qa-q])$/, '').trim().toLowerCase()
    }));

    filteredStocks = [...new Map(normalizedStocks.filter(stock => 
      stock.tags.some(tag => tag.toLowerCase().includes(filterTag))
    ).map(stock => [stock.normalizedName, stock])).values()];
  }
  currentPage = 1;
  displayStocks();
  updateFilteredNamesList();
}

      function clearFilters() {
    document.getElementById('filterInput').value = '';
    document.getElementById('searchInput').value = '';
    filteredStocks = [...stocks];
    currentPage = 1;
    displayStocks();
    updateFilteredNamesList();  // Add this line
}

        function displayStocks() {
            const container = document.getElementById('stocksContainer');
            container.innerHTML = '';

            const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const stocksToDisplay = filteredStocks.slice(startIndex, endIndex);

            stocksToDisplay.forEach((stock, index) => {
                const stockCard = document.createElement('div');
                stockCard.className = `stock-card ${editingIndex === startIndex + index ? 'editing' : ''}`;
                stockCard.setAttribute('data-index', index);
                
                if (editingIndex === startIndex + index) {
                    stockCard.innerHTML = `
                        <div class="stock-name">
                            <span>Editing Stock</span>
                            <div class="button-group">
                                <button class="save-btn" onclick="saveEdits(${index})">Save</button>
                                <button class="cancel-btn" onclick="cancelEditing()">Cancel</button>
                            </div>
                        </div>
                        <div class="edit-form">
                            <input type="text" class="edit-stock-name" value="${stock.name}" placeholder="Stock name">
                            <textarea class="edit-tags" placeholder="Tags (one per line)">${formatTags(stock.tags)}</textarea>
                        </div>
                    `;
                } else {
                    stockCard.innerHTML = `
                        <div class="stock-name">
                            ${stock.name}
                            <div class="button-group">
                                <button class="edit-btn" onclick="startEditing(${index})">Edit</button>
                                <button class="delete-btn" onclick="deleteStock(${index})">Delete</button>
                            </div>
                        </div>
                        <div class="tags">
                            ${stock.tags.map((tag, tagIndex) => `
                                <span class="tag">
                                    ${tag}
                                    <span class="remove-tag" onclick="removeTag(${index}, ${tagIndex})">×</span>
                                </span>
                            `).join('')}
                        </div>
                    `;
                }
                
                container.appendChild(stockCard);
            });

            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredStocks.length / ITEMS_PER_PAGE);
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) return;

            if (currentPage > 1) {
                const prevButton = document.createElement('button');
                prevButton.textContent = 'Previous';
                prevButton.onclick = () => {
                    currentPage--;
                    displayStocks();
                };
                paginationContainer.appendChild(prevButton);
            }

            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                if (i === currentPage) {
                    pageButton.style.backgroundColor = '#45a049';
                }
                pageButton.onclick = () => {
                    currentPage = i;
                    displayStocks();
                };
                paginationContainer.appendChild(pageButton);
            }

            if (currentPage < totalPages) {
                const nextButton = document.createElement('button');
                nextButton.textContent = 'Next';
                nextButton.onclick = () => {
                    currentPage++;
                    displayStocks();
                };
                paginationContainer.appendChild(nextButton);
            }
        }

        // Initial display
        updateStats();
        displayStocks();
    </script>
</body>
</html>